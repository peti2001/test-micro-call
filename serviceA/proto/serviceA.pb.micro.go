// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: serviceA.proto

package serviceA

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ServiceB service

type ServiceBService interface {
	AckMessage(ctx context.Context, in *AckMessageRequest, opts ...client.CallOption) (*AckMessageResponse, error)
}

type serviceBService struct {
	c    client.Client
	name string
}

func NewServiceBService(name string, c client.Client) ServiceBService {
	return &serviceBService{
		c:    c,
		name: name,
	}
}

func (c *serviceBService) AckMessage(ctx context.Context, in *AckMessageRequest, opts ...client.CallOption) (*AckMessageResponse, error) {
	req := c.c.NewRequest(c.name, "ServiceB.AckMessage", in)
	out := new(AckMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServiceB service

type ServiceBHandler interface {
	AckMessage(context.Context, *AckMessageRequest, *AckMessageResponse) error
}

func RegisterServiceBHandler(s server.Server, hdlr ServiceBHandler, opts ...server.HandlerOption) error {
	type serviceB interface {
		AckMessage(ctx context.Context, in *AckMessageRequest, out *AckMessageResponse) error
	}
	type ServiceB struct {
		serviceB
	}
	h := &serviceBHandler{hdlr}
	return s.Handle(s.NewHandler(&ServiceB{h}, opts...))
}

type serviceBHandler struct {
	ServiceBHandler
}

func (h *serviceBHandler) AckMessage(ctx context.Context, in *AckMessageRequest, out *AckMessageResponse) error {
	return h.ServiceBHandler.AckMessage(ctx, in, out)
}
